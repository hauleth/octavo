# Appveyor configuration template for Rust
# https://github.com/starkat99/appveyor-rust

os: Visual Studio 2015

environment:
  matrix:
### MSVC Toolchains ###
  # Stable 64-bit MSVC
    - channel: stable
      target: x86_64-pc-windows-msvc
  # Stable 32-bit MSVC
    - channel: stable
      target: i686-pc-windows-msvc
  # Beta 64-bit MSVC
    - channel: beta
      target: x86_64-pc-windows-msvc
  # Beta 32-bit MSVC
    - channel: beta
      target: i686-pc-windows-msvc
  # Nightly 64-bit MSVC
    - channel: nightly
      target: x86_64-pc-windows-msvc
  # Nightly 32-bit MSVC
    - channel: nightly
      target: i686-pc-windows-msvc

### GNU Toolchains ###
  # Stable 64-bit GNU
    - channel: stable
      target: x86_64-pc-windows-gnu
  # Stable 32-bit GNU
    - channel: stable
      target: i686-pc-windows-gnu
  # Beta 64-bit GNU
    - channel: beta
      target: x86_64-pc-windows-gnu
  # Beta 32-bit GNU
    - channel: beta
      target: i686-pc-windows-gnu
  # Nightly 64-bit GNU
    - channel: nightly
      target: x86_64-pc-windows-gnu
  # Nightly 32-bit GNU
    - channel: nightly
      target: i686-pc-windows-gnu

### Allowed failures ###

# See Appveyor documentation for specific details. In short, place any channel or targets you wish
# to allow build failures on (usually nightly at least is a wise choice). This will prevent a build
# or test failure in the matching channels/targets from failing the entire build.
matrix:
  allow_failures:
    - channel: nightly
    - target: i686-pc-windows-msvc

## Install Script ##
install:
- ps: .\tools\install.ps1

## Build Script ##
# 'cargo test' takes care of building for us, so disable Appveyor's build stage. This prevents
# the "directory does not contain a project or solution file" error.
build: false

# Uses 'cargo test' to run tests. Alternatively, the project may call compiled programs directly or
# perform other testing commands. Rust will automatically be placed in the PATH environment
# variable.
test_script:
- cmd: make all
